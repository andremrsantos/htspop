// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// blocked_sample
arma::uvec blocked_sample(const uint bsize, const uint nblocks, const uint length);
RcppExport SEXP _htspop_blocked_sample(SEXP bsizeSEXP, SEXP nblocksSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const uint >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< const uint >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(blocked_sample(bsize, nblocks, length));
    return rcpp_result_gen;
END_RCPP
}
// blocked_sums
arma::vec blocked_sums(const arma::vec& val, const uint bsize, const uint nblock, const bool rm_na);
RcppExport SEXP _htspop_blocked_sums(SEXP valSEXP, SEXP bsizeSEXP, SEXP nblockSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const uint >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const uint >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(blocked_sums(val, bsize, nblock, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// blocked_means
arma::vec blocked_means(const arma::vec& val, const uint bsize, const uint nblock, const bool rm_na);
RcppExport SEXP _htspop_blocked_means(SEXP valSEXP, SEXP bsizeSEXP, SEXP nblockSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const uint >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const uint >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(blocked_means(val, bsize, nblock, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// blocked_col_sums
arma::mat blocked_col_sums(const arma::mat& matrix, const uint bsize, const uint nblock, const bool rm_na);
RcppExport SEXP _htspop_blocked_col_sums(SEXP matrixSEXP, SEXP bsizeSEXP, SEXP nblockSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const uint >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const uint >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(blocked_col_sums(matrix, bsize, nblock, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// blocked_col_means
arma::mat blocked_col_means(const arma::mat& matrix, const uint bsize, const uint nblock, const bool rm_na);
RcppExport SEXP _htspop_blocked_col_means(SEXP matrixSEXP, SEXP bsizeSEXP, SEXP nblockSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const uint >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< const uint >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(blocked_col_means(matrix, bsize, nblock, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_col_rates
arma::mat bootstrap_col_rates(const arma::mat& num, const arma::mat& den, const uint nboots, const bool rm_na);
RcppExport SEXP _htspop_bootstrap_col_rates(SEXP numSEXP, SEXP denSEXP, SEXP nbootsSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type num(numSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type den(denSEXP);
    Rcpp::traits::input_parameter< const uint >::type nboots(nbootsSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_col_rates(num, den, nboots, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_col_means
arma::mat bootstrap_col_means(const arma::mat& val, const uint nboots, const bool rm_na);
RcppExport SEXP _htspop_bootstrap_col_means(SEXP valSEXP, SEXP nbootsSEXP, SEXP rm_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type val(valSEXP);
    Rcpp::traits::input_parameter< const uint >::type nboots(nbootsSEXP);
    Rcpp::traits::input_parameter< const bool >::type rm_na(rm_naSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_col_means(val, nboots, rm_na));
    return rcpp_result_gen;
END_RCPP
}
// fst_reich
arma::mat fst_reich(const arma::mat& fq, const arma::mat& ht, const arma::mat& n);
RcppExport SEXP _htspop_fst_reich(SEXP fqSEXP, SEXP htSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type fq(fqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ht(htSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fst_reich(fq, ht, n));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_reich
List pairwise_fst_reich(const arma::mat& count, const arma::mat& n);
RcppExport SEXP _htspop_pairwise_fst_reich(SEXP countSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_reich(count, n));
    return rcpp_result_gen;
END_RCPP
}
// fst_weir_cockerham
arma::vec fst_weir_cockerham(const arma::mat& fq, const arma::mat& n);
RcppExport SEXP _htspop_fst_weir_cockerham(SEXP fqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type fq(fqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fst_weir_cockerham(fq, n));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_weir_cockerham
arma::mat pairwise_fst_weir_cockerham(const arma::mat& count, const arma::mat& n);
RcppExport SEXP _htspop_pairwise_fst_weir_cockerham(SEXP countSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_weir_cockerham(count, n));
    return rcpp_result_gen;
END_RCPP
}
// fst_hudson
arma::vec fst_hudson(const arma::mat& fq, const arma::mat& n);
RcppExport SEXP _htspop_fst_hudson(SEXP fqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type fq(fqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fst_hudson(fq, n));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_hudson
arma::mat pairwise_fst_hudson(const arma::mat& count, const arma::mat& n);
RcppExport SEXP _htspop_pairwise_fst_hudson(SEXP countSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_hudson(count, n));
    return rcpp_result_gen;
END_RCPP
}
// fst_wright
arma::vec fst_wright(const arma::mat& fq);
RcppExport SEXP _htspop_fst_wright(SEXP fqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type fq(fqSEXP);
    rcpp_result_gen = Rcpp::wrap(fst_wright(fq));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_wright
arma::mat pairwise_fst_wright(const arma::mat& count, const arma::mat& total);
RcppExport SEXP _htspop_pairwise_fst_wright(SEXP countSEXP, SEXP totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type total(totalSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_wright(count, total));
    return rcpp_result_gen;
END_RCPP
}
// nei_matrix
Rcpp::List nei_matrix(const arma::mat& f);
RcppExport SEXP _htspop_nei_matrix(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(nei_matrix(f));
    return rcpp_result_gen;
END_RCPP
}
// nei
arma::mat nei(const arma::mat& f);
RcppExport SEXP _htspop_nei(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(nei(f));
    return rcpp_result_gen;
END_RCPP
}
// nei_da_matrix
arma::mat nei_da_matrix(const arma::mat& f);
RcppExport SEXP _htspop_nei_da_matrix(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(nei_da_matrix(f));
    return rcpp_result_gen;
END_RCPP
}
// nei_da
arma::mat nei_da(const arma::mat& f);
RcppExport SEXP _htspop_nei_da(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(nei_da(f));
    return rcpp_result_gen;
END_RCPP
}
// fast_nei
arma::mat fast_nei(const arma::mat& f);
RcppExport SEXP _htspop_fast_nei(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_nei(f));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_fast_nei
arma::cube bootstrap_fast_nei(const arma::mat& f, const uint boots, const uint block);
RcppExport SEXP _htspop_bootstrap_fast_nei(SEXP fSEXP, SEXP bootsSEXP, SEXP blockSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const uint >::type boots(bootsSEXP);
    Rcpp::traits::input_parameter< const uint >::type block(blockSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_fast_nei(f, boots, block));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_nei
arma::mat bootstrap_nei(const arma::mat& jxy, const arma::mat& jx, const uint block, const uint boots);
RcppExport SEXP _htspop_bootstrap_nei(SEXP jxySEXP, SEXP jxSEXP, SEXP blockSEXP, SEXP bootsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type jxy(jxySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type jx(jxSEXP);
    Rcpp::traits::input_parameter< const uint >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const uint >::type boots(bootsSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_nei(jxy, jx, block, boots));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_htspop_blocked_sample", (DL_FUNC) &_htspop_blocked_sample, 3},
    {"_htspop_blocked_sums", (DL_FUNC) &_htspop_blocked_sums, 4},
    {"_htspop_blocked_means", (DL_FUNC) &_htspop_blocked_means, 4},
    {"_htspop_blocked_col_sums", (DL_FUNC) &_htspop_blocked_col_sums, 4},
    {"_htspop_blocked_col_means", (DL_FUNC) &_htspop_blocked_col_means, 4},
    {"_htspop_bootstrap_col_rates", (DL_FUNC) &_htspop_bootstrap_col_rates, 4},
    {"_htspop_bootstrap_col_means", (DL_FUNC) &_htspop_bootstrap_col_means, 3},
    {"_htspop_fst_reich", (DL_FUNC) &_htspop_fst_reich, 3},
    {"_htspop_pairwise_fst_reich", (DL_FUNC) &_htspop_pairwise_fst_reich, 2},
    {"_htspop_fst_weir_cockerham", (DL_FUNC) &_htspop_fst_weir_cockerham, 2},
    {"_htspop_pairwise_fst_weir_cockerham", (DL_FUNC) &_htspop_pairwise_fst_weir_cockerham, 2},
    {"_htspop_fst_hudson", (DL_FUNC) &_htspop_fst_hudson, 2},
    {"_htspop_pairwise_fst_hudson", (DL_FUNC) &_htspop_pairwise_fst_hudson, 2},
    {"_htspop_fst_wright", (DL_FUNC) &_htspop_fst_wright, 1},
    {"_htspop_pairwise_fst_wright", (DL_FUNC) &_htspop_pairwise_fst_wright, 2},
    {"_htspop_nei_matrix", (DL_FUNC) &_htspop_nei_matrix, 1},
    {"_htspop_nei", (DL_FUNC) &_htspop_nei, 1},
    {"_htspop_nei_da_matrix", (DL_FUNC) &_htspop_nei_da_matrix, 1},
    {"_htspop_nei_da", (DL_FUNC) &_htspop_nei_da, 1},
    {"_htspop_fast_nei", (DL_FUNC) &_htspop_fast_nei, 1},
    {"_htspop_bootstrap_fast_nei", (DL_FUNC) &_htspop_bootstrap_fast_nei, 3},
    {"_htspop_bootstrap_nei", (DL_FUNC) &_htspop_bootstrap_nei, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_htspop(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
